// 아주 큰 수는 long long 으로도 덧셈할 수 없다.
// 따라서 string을 사용한다.
// 
// string으로 받은 num1과 num2를 뒤집는다.
// 맨 앞자리부터 하나씩 더한다. 10을 넘어가면 carry가 발생한다.
// 더한 수를 다시 뒤집어 원래 수로 만든다.

#include <iostream>
#include <string>

using namespace std;

void reverse (string &s);

int main() {
	string num1, num2, lower, higher;
	string ans;
	long long length;
	int carry = 0;
	int sum;

	cin >> num1 >> num2;

	reverse(num1);
	reverse(num2);

	if (num1.size() >= num2.size()) {
		length = num1.size() - num2.size();
		lower = num2;
		higher = num1;
	}
	else {
		length = num2.size() - num1.size();
		lower = num1;
		higher = num2;
	}

	for (int i = 0; i < lower.size(); i++) {
		sum = stoi(lower.substr(i, 1)) + stoi(higher.substr(i, 1)) + carry;

		if (sum >= 10) {
			carry = 1;
			ans += to_string(sum - 10);
		}

		else {
			carry = 0;
			ans += to_string(sum);
		}

		if (i == lower.size() - 1 && lower.size() == higher.size() && carry == 1)   // 마지막에 더한 수가 10을 넘어갈 때 carry를 반영해야 한다.
			ans += to_string(carry);
	}

	for (int i = lower.size(); i < higher.size(); i++) {
		sum = stoi(higher.substr(i, 1)) + carry;

		if (sum >= 10) {
			carry = 1;
			ans += to_string(sum - 10);
		}

		else {
			carry = 0;
			ans += to_string(sum);
		}

		if (i == higher.size() - 1 && carry == 1)   // 마지막에 더한 수가 10을 넘어갈 때 carry를 반영해야 한다.
			ans += to_string(carry);
	}

	reverse(ans);

	cout << ans;
}

void reverse(string &s) {			// 참조 변수를 이용하여 문자 s를 근본적으로 바꿔준다.
	char temp;

	for (int i = 0; i < s.size() / 2; i++) {
		temp = s[i];
		s[i] = s[s.size() - 1 - i];
		s[s.size() - 1 - i] = temp;
	}
}
